name: ci

concurrency:
  cancel-in-progress: ${{ ! startsWith(github.ref, 'refs/tags/') }}
  group: ci-${{ github.ref_name }}-${{ github.event_name }}

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * 0"

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  check-kubectl-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.check-versions.outputs.versions }}
    steps:
      - name: Install regctl
        uses: iarekylew00t/regctl-installer@v4
      - name: Check for new kubectl versions
        id: check-versions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux

          EXISTING_TAGS=$(regctl tag ls ghcr.io/${{ github.repository }} 2>/dev/null | jq -R . | jq -s .)

          ALL_VERSIONS=$(gh release list --jq '[.[].tagName]' --json tagName -R kubernetes/kubernetes)

          NEW_VERSIONS=$(echo "$ALL_VERSIONS" | jq -c --argjson existing "$EXISTING_TAGS" '[.[] | select(. as $v | $existing | index($v) | not)]')

          echo "versions=${NEW_VERSIONS}" | tee -a "$GITHUB_OUTPUT"

  build-docker:
    needs: check-kubectl-versions
    if: needs.check-kubectl-versions.outputs.versions != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.check-kubectl-versions.outputs.versions) }}
    steps:
      - name: Build Docker for kubectl ${{ matrix.version }}
        uses: meysam81/build-docker@main
        with:
          build-args: |
            KUBECTL_VERSION=${{ matrix.version }}
          cosign: true
          image-extra-tags: |
            ghcr.io/${{ github.repository }}:${{ matrix.version }}
          image-name: ghcr.io/${{ github.repository }}
          kubescape: true

  labeler:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: PR Labeler
        uses: srvaroa/labeler@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          config_path: .github/labeler.yml
          use_local_config: false
          fail_on_error: false
